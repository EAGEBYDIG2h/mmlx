#!/usr/bin/env python

# Copyright 2011 Craig Campbell
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import getopt, sys, os

options = {
    'verbose': False,
    'open_nsf': False,
    'listen': False,
    'local': False,
    'create_nsf': True
}

try:
    from mmlxlib.listener import Listener
    from mmlxlib.musicbox import MusicBox
    from mmlxlib.logger import Logger
except:
    options['local'] = True
    path = os.path.realpath(__file__ + '/../../')
    sys.path.append(path)
    from mmlxlib.listener import Listener
    from mmlxlib.musicbox import MusicBox
    from mmlxlib.logger import Logger

def showUsage(message = None):
    logger = Logger(options)
    musicbox = MusicBox(logger)
    musicbox.showUsage(message)
    sys.exit(1)

try:
    opts, args = getopt.getopt(sys.argv[1:], "", ["verbose", "help", "watch=", "open-nsf", "no-nsf"])
except:
    showUsage()

start = None
file_list = {}

if len(opts) == 0:
    for arg in args:
        opts.append((arg, ''))

for key, value in opts:
    if key == "--help":
        showUsage()
    elif key == "--verbose":
        options['verbose'] = True
    elif key == "--open-nsf":
        options['open_nsf'] = True
    elif key == "--no-nsf":
        options['create_nsf'] = False
    elif key == "--watch":
        options['listen'] = True
        bits = value.split(':')
        start = bits[0]
        if len(bits) == 1 and os.path.isdir(start):
            end = bits[0]
            continue;

        if len(bits) == 1 and not os.path.isdir(start):
            end = start.replace('.mmlx', '.mml')
            continue

        end = bits[1]

def isFileOrDirectory(path):
    return os.path.isfile(path) or os.path.isdir(path)

try:
    logger = Logger(options)

    if len(args) >= 2:
        start = args[0]
        end = args[1]

    if len(args) == 1:
        start = args[0]
        end = start.replace('.mmlx', '.mml')

    if start is None:
        showUsage()

    if not isFileOrDirectory(start):
        showUsage(logger.color(start, logger.YELLOW) + " is not a file or directory\n")

    listener = Listener(logger)
    musicbox = MusicBox(logger, options)
    listener.onChange(musicbox.processFile)
    if options['listen']:
        listener.watch(start, end)
    else:
        listener.process(start, end)
        logger.log(logger.color('Done!', logger.PINK))
        sys.exit(0)

except KeyboardInterrupt:
    phrases = [
        'Sayonara!',
        'Goodbye! Have a nice day!',
        'Come back soon!',
        'Sad to see you leaving already!',
        'Hasta la vista, baby'
    ]
    from random import choice
    logger.log(logger.color('\n' + choice(phrases), logger.PINK))
    sys.exit(0)

except Exception:
    logger.log(logger.color('Sorry, an error occured:\n', logger.RED))
    import traceback
    lines = traceback.format_exc().splitlines()
    logger.log(logger.color(lines.pop(), logger.RED) + '\n')
    logger.log('\n'.join(lines))
    logger.log('')
    sys.exit(1)
