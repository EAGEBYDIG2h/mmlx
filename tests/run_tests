#!/usr/bin/env python

import os, unittest, sys, inspect

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0] + '/../mmlxlib'
if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)

from instrument import Instrument

class InstrumentTest(unittest.TestCase):

    def testHasParent(self):
        instrument = Instrument({
            'volume': '8 7 6 5 4',
            'q': '4',
            'extends': 'other'
        })
        self.assertTrue(instrument.hasParent())

        instrument = Instrument({
            'volume': '8 7 6 5 4',
            'timbre': '0'
        })
        self.assertFalse(instrument.hasParent())

    def testInherit(self):
        other_other_instrument = Instrument({
            'timbre': '0 0 2'
        })

        other_instrument = Instrument({
            'volume': '10 9 8 7 6',
            'q': '4',
            'extends': 'other_other'
        })

        instrument = Instrument({
            'volume': '8 7 6 5 4',
            'extends': 'other'
        })

        self.assertEqual(instrument.extends, 'other')
        self.assertFalse(hasattr(instrument, 'q'))
        self.assertFalse(hasattr(instrument, 'timbre'))

        instrument.inherit(other_instrument)

        self.assertEqual(instrument.extends, 'other_other')
        self.assertEqual(instrument.volume, '8 7 6 5 4')
        self.assertEqual(instrument.q, '4')
        self.assertFalse(hasattr(instrument, 'timbre'))

        other_instrument.inherit(other_other_instrument)

        instrument.inherit(other_instrument)

        self.assertFalse(hasattr(instrument, 'extends'))
        self.assertEqual(instrument.volume, '8 7 6 5 4')
        self.assertEqual(instrument.q, '4')
        self.assertEqual(instrument.timbre, '0 0 2')

if __name__ == '__main__':
    unittest.main()