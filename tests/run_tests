#!/usr/bin/env python

import os, unittest, sys, inspect, glob

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0] + '/../mmlxlib'
if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)

from instrument import Instrument
from warpwhistle import WarpWhistle

class InstrumentTest(unittest.TestCase):

    def testHasParent(self):
        instrument = Instrument({
            'volume': '8 7 6 5 4',
            'q': '4',
            'extends': 'other'
        })
        self.assertTrue(instrument.hasParent())

        instrument = Instrument({
            'volume': '8 7 6 5 4',
            'timbre': '0'
        })
        self.assertFalse(instrument.hasParent())

    def testInherit(self):
        other_other_instrument = Instrument({
            'timbre': '0 0 2'
        })

        other_instrument = Instrument({
            'volume': '10 9 8 7 6',
            'q': '4',
            'extends': 'other_other'
        })

        instrument = Instrument({
            'volume': '8 7 6 5 4',
            'extends': 'other'
        })

        self.assertEqual(instrument.extends, 'other')
        self.assertFalse(hasattr(instrument, 'q'))
        self.assertFalse(hasattr(instrument, 'timbre'))

        instrument.inherit(other_instrument)

        self.assertEqual(instrument.extends, 'other_other')
        self.assertEqual(instrument.volume, '8 7 6 5 4')
        self.assertEqual(instrument.q, '4')
        self.assertFalse(hasattr(instrument, 'timbre'))

        other_instrument.inherit(other_other_instrument)

        instrument.inherit(other_instrument)

        self.assertFalse(hasattr(instrument, 'extends'))
        self.assertEqual(instrument.volume, '8 7 6 5 4')
        self.assertEqual(instrument.q, '4')
        self.assertEqual(instrument.timbre, '0 0 2')

class Logger(object):
    BLUE = 'blue'
    LIGHT_BLUE = 'light_blue'
    PINK = 'pink'
    YELLOW = 'yellow'
    WHITE = 'white'
    GREEN = 'green'
    RED = 'red'
    GRAY = 'gray'
    UNDERLINE = 'underline'
    ITALIC = 'italic'

    def color(self, message, color, bold = False):
        pass

    def log(self, message, verbose_only=False):
        pass

class MMLXTest(unittest.TestCase):
    def removeWhitespace(self, content):
        lines = content.splitlines()
        new_lines = []
        for line in lines:
            new_lines.append(line.strip())

        string = "\n".join(new_lines)

        # remove any new lines at beginning or end of string
        return string.strip()

    def getContents(self, path):
        file = open(path, "r")
        content = file.read()
        file.close()

        return content

    def testFeatures(self):
        self.runForDirectory('features')

    def testChips(self):
        self.runForDirectory('chips')

    def testSongs(self):
        self.runForDirectory('songs')

    def runForDirectory(self, directory):
        data = os.path.join(os.path.dirname(__file__), directory)
        mmlx_files = glob.glob(data + '/*.mmlx')
        for mmlx_file in mmlx_files:
            content = self.getContents(mmlx_file)

            whistle = WarpWhistle(content, Logger(), {})

            mml_file_name = mmlx_file.replace('.mmlx', '.mml')

            self.assertTrue(os.path.exists(mml_file_name), "\n\nFile does not exist at: " + mml_file_name)

            mml_content = self.removeWhitespace(self.getContents(mml_file_name))

            mml = self.removeWhitespace(whistle.play()[0])

            self.assertEqual(mml_content, mml, "\n\nFailure in test: " + mmlx_file + '\nExpected: \'' + mml_content.replace('\n', '\\n') + '\'' + '\nActual: \'' + mml.replace('\n', '\\n') + '\'')

if __name__ == '__main__':
    unittest.main()
